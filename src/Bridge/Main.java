package Bridge;

// 桥接模式：将【抽象部分】与【实现部分】分离，使它们可以独立变化，从而降低耦合度

// 比如形编辑器中，每⼀种图形都需要蓝⾊、红⾊、⻩⾊不同的颜⾊，如果不使⽤桥接模式，可能需
// 要为每⼀种图形类型和每⼀种颜⾊都创建⼀个具体的⼦类，⽽使⽤桥接模式可以将图形和颜⾊两个维度分离，两个
// 维度都可以独⽴进⾏变化和扩展，如果要新增其他颜⾊，只需添加新的 Color ⼦类，不影响图形类；反之亦然。


// 桥接模式的基本结构分为以下⼏个⻆⾊：
//抽象 Abstraction ：⼀般是抽象类，定义抽象部分的接⼝，维护⼀个对【实现】的引⽤。
//修正抽象 RefinedAbstaction ：对抽象接⼝进⾏扩展，通常对抽象化的不同维度进⾏变化或定制。
//实现 Implementor ： 定义实现部分的接⼝，提供具体的实现。这个接⼝通常是抽象化接⼝的实现。
//具体实现 ConcreteImplementor ：实现实现化接⼝的具体类。这些类负责实现实现化接⼝定义的具体操作。

public class Main {
    
}
